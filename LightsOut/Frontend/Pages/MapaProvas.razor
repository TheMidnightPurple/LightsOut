@page "/mapaProvas"

@using LightsOut.Data;
@using DataAccessLibrary;
@using DataAccessLibrary.Models;
@using Newtonsoft.Json;

@inject IJSRuntime JSRuntime
@inject PageHistoryState PageHistoryState
@inject ILocalizacaoData _dbLocalizacao
@inject IProvaData _dbProva

<div class="contentor">

    <div id='map' style="height: 100vh; width: 100%;"></div>
    <div class="filtros">
        <div class="row">
            <div class="row">
                <button type="button" @onclick="PrevDiaInicial">&#8249</button>
                <p>Data Inicial: @(diaInicial.ToString("dd/MM/yyyy"))</p>
                <button type="button" @onclick="ProxDiaInicial">&#8250</button>
            </div>
        </div>
        <div class="row">
            <div class="row">
                <button type="button" @onclick="PrevDiaFinal">&#8249</button>
                <p>Data Final: @(diaFinal.ToString("dd/MM/yyyy"))</p>
                <button type="button" @onclick="ProxDiaFinal">&#8250</button>
            </div>
        </div>
        <div class="row">
            <div class="row">
                <button type="button" @onclick="DecrementRange">&#8249</button>
                <p>Range: @range</p>
                <button type="button" @onclick="IncrementRange">&#8250</button>
            </div>
        </div>
    </div>
</div>


@code {
    private DateTime diaInicial = DateTime.Now;
    private DateTime diaFinal = DateTime.Now;
    private int range = 1;
    //private ProvaMo prova = new Prova();
    private List<ProvaModel> provas = new List<ProvaModel>();
    //private Localizacao local = new Localizacao();
    private List<LocalizacaoModel> localizacoes = new List<LocalizacaoModel>();
    private List<List<float>> locais = new List<List<float>>();
    private String time;


    private void IncrementRange()
    {
        int i = range + 1;
        range = i;
    }

    private void DecrementRange()
    {
        if (range > 1)
        {
            int i = range - 1;
            range = i;
        }
    }

    private void ProxDiaInicial()
    {
        DateTime d = diaInicial.AddDays(range);
        if (d <= diaFinal)
        {
            diaInicial = d;
            base.StateHasChanged();
        }
        else
        {
            diaInicial = diaFinal;
            base.StateHasChanged();
        }
    }

    private void ProxDiaFinal()
    {
        DateTime d = diaFinal.AddDays(range);
        diaFinal = d;
        base.StateHasChanged();
    }


    protected void PrevDiaInicial()
    {
        DateTime d = diaInicial.AddDays(-range);
        diaInicial = d;
        base.StateHasChanged();
    }

    protected void PrevDiaFinal()
    {
        DateTime d = diaFinal.AddDays(-range);
        if (d >= diaInicial)
        {
            diaFinal = d;
            base.StateHasChanged();
        }
        else
        {
            diaFinal = diaInicial;
            base.StateHasChanged();
        }
    }

    protected List<List<float>> getCoord(List<ProvaModel> provas)
    {
        List<List<float>> result = new List<List<float>>();

        foreach (ProvaModel prova in provas)
        {
            List<float> coord = new List<float>();
            coord.Add(prova.localizacao.latitude);
            coord.Add(prova.localizacao.longitude);
            result.Add(coord);
        }

        return result;
    }

    protected List<string> getNomes(List<ProvaModel> provas)
    {
        List<string> result = new List<string>();

        foreach (ProvaModel prova in provas)
        {
            result.Add(prova.id);
        }

        return result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            provas = _dbProva.localizacaoProvasIntervalo(diaInicial.ToString("yyyy-MM-dd"), diaFinal.ToString("yyyy-MM-dd"));
            List<string> res = new List<string>();

            foreach (var p in provas)
            {
                res.Add(JsonConvert.SerializeObject(p));
            }

            await JSRuntime.InvokeVoidAsync("loadMapScenario", res);
            TimerService.UpdateEvent += async date =>
            {
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };
        }
        else
        {
            provas = _dbProva.localizacaoProvasIntervalo(diaInicial.ToString("yyyy-MM-dd"), diaFinal.ToString("yyyy-MM-dd"));
            List<string> res = new List<string>();

            foreach (var p in provas)
            {
                res.Add(JsonConvert.SerializeObject(p));
            }

            await JSRuntime.InvokeVoidAsync("loadMapScenario", res);

            TimerService.UpdateEvent += async date =>
            {
                await InvokeAsync(() =>
                {
                    time += date;
                    StateHasChanged();
                });
            };

        }

        PageHistoryState.AddPageToHistory("/mapaProvas");
    }
}